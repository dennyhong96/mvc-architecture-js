"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

var _fractional = require("fractional");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to set private field on non-instance"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } return value; }

function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

var _parentElement = new WeakMap();

var _data = new WeakMap();

var _errMessage = new WeakMap();

var _message = new WeakMap();

var _clear = new WeakSet();

var _generateMarkup = new WeakSet();

var _generateMarkupIngredients = new WeakSet();

class RecipeView {
  constructor() {
    _generateMarkupIngredients.add(this);

    _generateMarkup.add(this);

    _clear.add(this);

    _parentElement.set(this, {
      writable: true,
      value: document.querySelector(".recipe")
    });

    _data.set(this, {
      writable: true,
      value: void 0
    });

    _errMessage.set(this, {
      writable: true,
      value: "We cound not find that recipe, please try another one."
    });

    _message.set(this, {
      writable: true,
      value: ""
    });
  }

  // View in MVC shouldn't be aware of controller directly
  // So don't import controller and use it
  // Use a pubsub pattern:
  // `attachRenderHandler` is the publisher of pubsub
  attachRenderHandler(handler) {
    // `handler` is the subscriber of pubsub
    ["load", "hashchange"].forEach(event => window.addEventListener(event, handler));
  }

  renderError(errMsg = _classPrivateFieldGet(this, _errMessage)) {
    const errorMarkup = `
    <div class="error">
      <div>
        <svg>
          <use href="${_icons.default}#icon-alert-triangle"></use>
        </svg>
      </div>
      <p>${errMsg}</p>
    </div>`; // Clears existing markup

    _classPrivateMethodGet(this, _clear, _clear2).call(this); // Appends markup to parent


    _classPrivateFieldGet(this, _parentElement).insertAdjacentHTML("afterbegin", errorMarkup);
  }

  renderMessage(msg) {
    const messageMarkup = `
    <div class="message">
      <div>
        <svg>
          <use href="src/img/icons.svg#icon-smile"></use>
        </svg>
      </div>
      <p>
        No bookmarks yet. Find a nice recipe and bookmark it :)
      </p>
    </div>`; // Clears existing markup

    _classPrivateMethodGet(this, _clear, _clear2).call(this); // Appends markup to parent


    _classPrivateFieldGet(this, _parentElement).insertAdjacentHTML("afterbegin", messageMarkup);
  } // Renders recipe into recipe container


  render(data) {
    _classPrivateFieldSet(this, _data, data); // Generates markup


    const recipeMarkup = _classPrivateMethodGet(this, _generateMarkup, _generateMarkup2).call(this); // Clears existing markup


    _classPrivateMethodGet(this, _clear, _clear2).call(this); // Appends markup to document


    _classPrivateFieldGet(this, _parentElement).insertAdjacentHTML("afterbegin", recipeMarkup);
  } // Renders spinner loader into recipe container


  renderSpinner() {
    // Builds spinner markup
    const spinnerMarkup = `
  <div class="spinner">
    <svg>
      <use href="${_icons.default}#icon-loader"></use>
    </svg>
  </div>`; // Clear existin markup in parent container

    _classPrivateMethodGet(this, _clear, _clear2).call(this); // Appends markup to parent container


    _classPrivateFieldGet(this, _parentElement).insertAdjacentHTML("afterbegin", spinnerMarkup);
  } // Clears recipe container


}

var _clear2 = function _clear2() {
  _classPrivateFieldGet(this, _parentElement).innerHTML = "";
};

var _generateMarkup2 = function _generateMarkup2() {
  return `
    <figure class="recipe__fig">
      <img src="${_classPrivateFieldGet(this, _data).image}" alt="${_classPrivateFieldGet(this, _data).title}" class="recipe__img" />
      <h1 class="recipe__title">
        <span>${_classPrivateFieldGet(this, _data).title}</span>
      </h1>
    </figure>

    <div class="recipe__details">
      <div class="recipe__info">
        <svg class="recipe__info-icon">
          <use href="${_icons.default}#icon-clock"></use>
        </svg>
        <span class="recipe__info-data recipe__info-data--minutes">${_classPrivateFieldGet(this, _data).cookingTime}</span>
        <span class="recipe__info-text">minutes</span>
      </div>
      <div class="recipe__info">
        <svg class="recipe__info-icon">
          <use href="${_icons.default}#icon-users"></use>
        </svg>
        <span class="recipe__info-data recipe__info-data--people">${_classPrivateFieldGet(this, _data).servings}</span>
        <span class="recipe__info-text">servings</span>

        <div class="recipe__info-buttons">
          <button class="btn--tiny btn--increase-servings">
            <svg>
              <use href="${_icons.default}#icon-minus-circle"></use>
            </svg>
          </button>
          <button class="btn--tiny btn--increase-servings">
            <svg>
              <use href="${_icons.default}#icon-plus-circle"></use>
            </svg>
          </button>
        </div>
      </div>

    <div class="recipe__user-generated">
      <svg>
        <use href="${_icons.default}#icon-user"></use>
      </svg>
    </div>
    <button class="btn--round">
      <svg class="">
        <use href="${_icons.default}#icon-bookmark-fill"></use>
      </svg>
    </button>
    </div>

    <div class="recipe__ingredients">
      <h2 class="heading--2">Recipe ingredients</h2>
      <ul class="recipe__ingredient-list">
      ${_classPrivateMethodGet(this, _generateMarkupIngredients, _generateMarkupIngredients2).call(this, _classPrivateFieldGet(this, _data).ingredients)}
      </ul>
    </div>

    <div class="recipe__directions">
      <h2 class="heading--2">How to cook it</h2>
      <p class="recipe__directions-text">
        This recipe was carefully designed and tested by
        <span class="recipe__publisher">${_classPrivateFieldGet(this, _data).publisher}</span>. Please check out
        directions at their website.
      </p>
      <a
        class="btn--small recipe__btn"
        href="${_classPrivateFieldGet(this, _data).sourceUrl}"
        target="_blank"
      >
        <span>Directions</span>
        <svg class="search__icon">
          <use href="${_icons.default}#icon-arrow-right"></use>
        </svg>
      </a>
    </div>`;
};

var _generateMarkupIngredients2 = function _generateMarkupIngredients2(ingredients) {
  return ingredients.map(({
    description,
    quantity,
    unit
  }) => `
    <li class="recipe__ingredient">
      <svg class="recipe__icon">
        <use href="${_icons.default}#icon-check"></use>
      </svg>
      ${quantity ? `<div class="recipe__quantity">${new _fractional.Fraction(quantity).toString()}</div>` : ""}
      <div class="recipe__description">
        ${unit ? `<span class="recipe__unit">${unit}</span>` : ""}
        ${description}
      </div>
    </li>`).join("");
};

var _default = new RecipeView();

exports.default = _default;