"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

var _View = _interopRequireDefault(require("./View"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PaginationView extends _View.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_parentElement", document.querySelector(".pagination"));
  }

  render(data) {
    this._data = data;

    const paginationMarkup = this._generateMarkup();

    this._parentElement.insertAdjacentHTML("afterbegin", paginationMarkup);
  }

  attachPaginationHandler(handler) {
    this._parentElement.addEventListener("click", function (evt) {
      const paginationBtn = evt.target.closest(".btn--inline");

      if (!["pagination__btn--prev", "pagination__btn--next"].some(className => paginationBtn.className.contains(className))) {}
    });
  }

  _generateMarkup() {
    const totalPages = Math.ceil(this._data.results.length / this._data.resultsPerPage);
    console.log(totalPages); // On page 1, and there's no other page

    if (this._data.pageNum === 1 && totalPages === 1) return; // On age 1, and there are other pages

    if (this._data.pageNum === 1 && this._data.pageNum < totalPages) {
      return `
      <button class="btn--inline pagination__btn--next">
        <span>Page ${this._data.pageNum + 1}</span>
        <svg class="search__icon">
          <use href="${_icons.default}#icon-arrow-right"></use>
        </svg>
      </button>`;
    } // On last page


    if (this._data.pageNum === totalPages) {
      return `
      <button class="btn--inline pagination__btn--prev">
        <svg class="search__icon">
          <use href="${_icons.default}#icon-arrow-left"></use>
        </svg>
        <span>Page ${this._data.pageNum - 1}</span>
      </button>`;
    } // On other pages


    return `
    <button class="btn--inline pagination__btn--prev">
      <svg class="search__icon">
        <use href="${_icons.default}#icon-arrow-left"></use>
      </svg>
      <span>Page ${this._data.pageNum - 1}</span>
    </button>
    <button class="btn--inline pagination__btn--next">
      <span>Page ${this._data.pageNum + 1}</span>
      <svg class="search__icon">
        <use href="${_icons.default}#icon-arrow-right"></use>
      </svg>
    </button> `;
  }

}

var _default = new PaginationView();

exports.default = _default;