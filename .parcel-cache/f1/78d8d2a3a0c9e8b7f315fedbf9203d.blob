"use strict";

require("core-js/modules/es.typed-array.float32-array");

require("core-js/modules/es.typed-array.float64-array");

require("core-js/modules/es.typed-array.int8-array");

require("core-js/modules/es.typed-array.int16-array");

require("core-js/modules/es.typed-array.int32-array");

require("core-js/modules/es.typed-array.uint8-array");

require("core-js/modules/es.typed-array.uint8-clamped-array");

require("core-js/modules/es.typed-array.uint16-array");

require("core-js/modules/es.typed-array.uint32-array");

require("core-js/modules/es.typed-array.from");

require("core-js/modules/es.typed-array.of");

require("core-js/modules/web.immediate");

require("core-js/modules/web.url");

require("core-js/modules/web.url.to-json");

require("core-js/modules/web.url-search-params");

require("regenerator-runtime");

var _icons = _interopRequireDefault(require("url:../img/icons.svg"));

var model = _interopRequireWildcard(require("./model"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//  polyfill ES6
// async/awwit polyfill
// import icons from "../img/icons.svg"; // Parcel 1
// Parcel 2
// DOM Elements
const recipeContainer = document.querySelector(".recipe");

const timeout = function (s) {
  return new Promise(function (_, reject) {
    setTimeout(function () {
      reject(new Error(`Request took too long! Timeout after ${s} second`));
    }, s * 1000);
  });
}; // https://forkify-api.herokuapp.com/v2
///////////////////////////////////////


const renderRecipe = async () => {
  // Get recipe id from url
  const recipeId = window.location.hash?.slice(1); // Handle no hash after url

  if (!recipeId) return; // Render a loading spinner

  renderSpinner(recipeContainer);

  try {
    // Loads recipe data from api
    await model.loadRecipt(recipeId); // Renders recipe
    // - Builds recipe markup

    const recipeMarkup = `
<figure class="recipe__fig">
  <img src="${recipe.image}" alt="${recipe.title}" class="recipe__img" />
  <h1 class="recipe__title">
    <span>${recipe.title}</span>
  </h1>
</figure>

<div class="recipe__details">
  <div class="recipe__info">
    <svg class="recipe__info-icon">
      <use href="${_icons.default}#icon-clock"></use>
    </svg>
    <span class="recipe__info-data recipe__info-data--minutes">${recipe.cookingTime}</span>
    <span class="recipe__info-text">minutes</span>
  </div>
  <div class="recipe__info">
    <svg class="recipe__info-icon">
      <use href="${_icons.default}#icon-users"></use>
    </svg>
    <span class="recipe__info-data recipe__info-data--people">${recipe.servings}</span>
    <span class="recipe__info-text">servings</span>

    <div class="recipe__info-buttons">
      <button class="btn--tiny btn--increase-servings">
        <svg>
          <use href="${_icons.default}#icon-minus-circle"></use>
        </svg>
      </button>
      <button class="btn--tiny btn--increase-servings">
        <svg>
          <use href="${_icons.default}#icon-plus-circle"></use>
        </svg>
      </button>
    </div>
  </div>

<div class="recipe__user-generated">
  <svg>
    <use href="${_icons.default}#icon-user"></use>
  </svg>
</div>
<button class="btn--round">
  <svg class="">
    <use href="${_icons.default}#icon-bookmark-fill"></use>
  </svg>
</button>
</div>

<div class="recipe__ingredients">
  <h2 class="heading--2">Recipe ingredients</h2>
  <ul class="recipe__ingredient-list">
  ${recipe.ingredients.map(({
      description,
      quantity,
      unit
    }) => `
    <li class="recipe__ingredient">
      <svg class="recipe__icon">
        <use href="${_icons.default}#icon-check"></use>
      </svg>
      ${quantity ? `<div class="recipe__quantity">${quantity}</div>` : ""}
      <div class="recipe__description">
        ${unit ? `<span class="recipe__unit">${unit}</span>` : ""}
        ${description}
      </div>
    </li>`).join("")}
  </ul>
</div>

<div class="recipe__directions">
  <h2 class="heading--2">How to cook it</h2>
  <p class="recipe__directions-text">
    This recipe was carefully designed and tested by
    <span class="recipe__publisher">${recipe.publisher}</span>. Please check out
    directions at their website.
  </p>
  <a
    class="btn--small recipe__btn"
    href="${recipe.sourceUrl}"
    target="_blank"
  >
    <span>Directions</span>
    <svg class="search__icon">
      <use href="${_icons.default}#icon-arrow-right"></use>
    </svg>
  </a>
</div>`; // - Clears existing markup

    recipeContainer.innerHTML = ""; // - Appends market to document

    recipeContainer.insertAdjacentHTML("afterbegin", recipeMarkup);
  } catch (error) {
    alert(error.message);
  }
};

function renderSpinner(parentEl) {
  // Builds spinner markup
  const spinnerMarkup = `
<div class="spinner">
  <svg>
    <use href="${_icons.default}#icon-loader"></use>
  </svg>
</div>`; // Clear existin markup in parent container

  parentEl.innerHTML = ""; // Appends markup to parent container

  parentEl.insertAdjacentHTML("afterbegin", spinnerMarkup);
} // Cleans object, get rid of unwanted props


const cleanObject = (object, ...propsToClean) => Object.entries(object).reduce((acc, [key, value]) => {
  !propsToClean.includes(key) && (acc[key] = value);
  return acc;
}, {}); // Trys to render recipe on load or url hash changes


["load", "hashchange"].forEach(event => window.addEventListener(event, renderRecipe));