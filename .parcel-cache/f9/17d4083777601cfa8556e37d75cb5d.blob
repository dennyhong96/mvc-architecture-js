"use strict";

require("core-js/modules/es.typed-array.float32-array");

require("core-js/modules/es.typed-array.float64-array");

require("core-js/modules/es.typed-array.int8-array");

require("core-js/modules/es.typed-array.int16-array");

require("core-js/modules/es.typed-array.int32-array");

require("core-js/modules/es.typed-array.uint8-array");

require("core-js/modules/es.typed-array.uint8-clamped-array");

require("core-js/modules/es.typed-array.uint16-array");

require("core-js/modules/es.typed-array.uint32-array");

require("core-js/modules/es.typed-array.from");

require("core-js/modules/es.typed-array.of");

require("core-js/modules/web.immediate");

require("core-js/modules/web.url");

require("core-js/modules/web.url.to-json");

require("core-js/modules/web.url-search-params");

require("regenerator-runtime");

var _icons = _interopRequireDefault(require("url:../img/icons.svg"));

var model = _interopRequireWildcard(require("./model"));

var _RecipeView = _interopRequireDefault(require("./views/RecipeView"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//  polyfill ES6
// async/awwit polyfill
// import icons from "../img/icons.svg"; // Parcel 1
// Parcel 2
// DOM Elements
const recipeContainer = document.querySelector(".recipe");

const timeout = function (s) {
  return new Promise(function (_, reject) {
    setTimeout(function () {
      reject(new Error(`Request took too long! Timeout after ${s} second`));
    }, s * 1000);
  });
}; // https://forkify-api.herokuapp.com/v2
///////////////////////////////////////


const renderRecipe = async () => {
  // Get recipe id from url
  const recipeId = window.location.hash?.slice(1); // Handle no hash after url

  if (!recipeId) return; // Render a loading spinner

  renderSpinner(recipeContainer);

  _RecipeView.default.renderSpinner();

  try {
    // Loads recipe data from api
    await model.loadRecipt(recipeId);
    const {
      recipe
    } = model.state; // Renders recipe

    _RecipeView.default.render(model.state.recipe);
  } catch (error) {
    alert(error.message);
  }
}; // Cleans object, get rid of unwanted props


const cleanObject = (object, ...propsToClean) => Object.entries(object).reduce((acc, [key, value]) => {
  !propsToClean.includes(key) && (acc[key] = value);
  return acc;
}, {}); // Trys to render recipe on load or url hash changes


["load", "hashchange"].forEach(event => window.addEventListener(event, renderRecipe));